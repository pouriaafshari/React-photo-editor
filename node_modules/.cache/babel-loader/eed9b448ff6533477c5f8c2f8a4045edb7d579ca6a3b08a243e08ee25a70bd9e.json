{"ast":null,"code":"var _jsxFileName = \"/Users/name/Documents/GITs/React-photo-editor/src/Tetris.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROWS = 20;\nconst COLS = 10;\nconst EMPTY_CELL = 0;\nconst SHAPES = [[[1, 1, 1, 1] // I\n], [[1, 1, 1],\n// L\n[1, 0, 0]], [[1, 1, 1],\n// J\n[0, 0, 1]], [[1, 1],\n// O\n[1, 1]], [[1, 1, 0],\n// S\n[0, 1, 1]], [[0, 1, 1],\n// Z\n[1, 1, 0]], [[1, 1, 1],\n// T\n[0, 1, 0]]];\nconst COLORS = ['cyan', 'orange', 'blue', 'yellow', 'green', 'red', 'purple'];\nconst getRandomShape = () => {\n  const randomIndex = Math.floor(Math.random() * SHAPES.length);\n  return SHAPES[randomIndex];\n};\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState(Array.from({\n    length: ROWS\n  }, () => Array(COLS).fill(EMPTY_CELL)));\n  const [currentShape, setCurrentShape] = useState(getRandomShape());\n  const [currentPosition, setCurrentPosition] = useState({\n    row: 0,\n    col: Math.floor(COLS / 2) - 1\n  });\n  const requestRef = useRef();\n  const moveDown = () => {\n    setCurrentPosition(prev => ({\n      ...prev,\n      row: prev.row + 1\n    }));\n  };\n  const moveLeft = () => {\n    setCurrentPosition(prev => ({\n      ...prev,\n      col: prev.col - 1\n    }));\n  };\n  const moveRight = () => {\n    setCurrentPosition(prev => ({\n      ...prev,\n      col: prev.col + 1\n    }));\n  };\n  const rotate = () => {\n    setCurrentShape(prev => {\n      const rotatedShape = prev[0].map((_, i) => prev.map(row => row[i])).reverse();\n      return [rotatedShape];\n    });\n  };\n  const checkCollision = (shape, position) => {\n    for (let row = 0; row < shape.length; row++) {\n      for (let col = 0; col < shape[row].length; col++) {\n        if (shape[row][col] && (board[position.row + row] && board[position.row + row][position.col + col]) !== EMPTY_CELL) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const placeShapeOnBoard = () => {\n    setBoard(prevBoard => {\n      const newBoard = prevBoard.map(row => row.slice());\n      for (let row = 0; row < currentShape.length; row++) {\n        for (let col = 0; col < currentShape[row].length; col++) {\n          if (currentShape[row][col]) {\n            newBoard[currentPosition.row + row][currentPosition.col + col] = 1;\n          }\n        }\n      }\n      return newBoard;\n    });\n  };\n  const clearRows = () => {\n    setBoard(prevBoard => {\n      const newBoard = prevBoard.filter(row => !row.every(cell => cell !== EMPTY_CELL));\n      while (newBoard.length < ROWS) {\n        newBoard.unshift(Array(COLS).fill(EMPTY_CELL));\n      }\n      return newBoard;\n    });\n  };\n  const handleKeyPress = event => {\n    switch (event.key) {\n      case 'ArrowUp':\n        rotate();\n        break;\n      case 'ArrowDown':\n        moveDown();\n        break;\n      case 'ArrowLeft':\n        moveLeft();\n        break;\n      case 'ArrowRight':\n        moveRight();\n        break;\n      default:\n        break;\n    }\n  };\n  const updateGame = () => {\n    moveDown();\n  };\n  const gameLoop = () => {\n    updateGame();\n    requestRef.current = requestAnimationFrame(gameLoop);\n  };\n  useEffect(() => {\n    if (checkCollision(currentShape, currentPosition)) {\n      placeShapeOnBoard();\n      clearRows();\n      setCurrentShape(getRandomShape());\n      setCurrentPosition({\n        row: 0,\n        col: Math.floor(COLS / 2) - 1\n      });\n    }\n  }, [currentPosition, currentShape]);\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress);\n    requestRef.current = requestAnimationFrame(gameLoop);\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      cancelAnimationFrame(requestRef.current);\n    };\n  }, [gameLoop]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${cell !== EMPTY_CELL ? COLORS[cell - 1] : ''}`\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OTvleeSg9A7g6stf3FhKSpMH4J8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ROWS","COLS","EMPTY_CELL","SHAPES","COLORS","getRandomShape","randomIndex","Math","floor","random","length","App","_s","board","setBoard","Array","from","fill","currentShape","setCurrentShape","currentPosition","setCurrentPosition","row","col","requestRef","moveDown","prev","moveLeft","moveRight","rotate","rotatedShape","map","_","i","reverse","checkCollision","shape","position","placeShapeOnBoard","prevBoard","newBoard","slice","clearRows","filter","every","cell","unshift","handleKeyPress","event","key","updateGame","gameLoop","current","requestAnimationFrame","document","addEventListener","removeEventListener","cancelAnimationFrame","className","children","rowIndex","colIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/name/Documents/GITs/React-photo-editor/src/Tetris.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst ROWS = 20;\nconst COLS = 10;\nconst EMPTY_CELL = 0;\n\nconst SHAPES = [\n  [\n    [1, 1, 1, 1], // I\n  ],\n  [\n    [1, 1, 1], // L\n    [1, 0, 0],\n  ],\n  [\n    [1, 1, 1], // J\n    [0, 0, 1],\n  ],\n  [\n    [1, 1], // O\n    [1, 1],\n  ],\n  [\n    [1, 1, 0], // S\n    [0, 1, 1],\n  ],\n  [\n    [0, 1, 1], // Z\n    [1, 1, 0],\n  ],\n  [\n    [1, 1, 1], // T\n    [0, 1, 0],\n  ],\n];\n\nconst COLORS = [\n  'cyan',\n  'orange',\n  'blue',\n  'yellow',\n  'green',\n  'red',\n  'purple',\n];\n\nconst getRandomShape = () => {\n  const randomIndex = Math.floor(Math.random() * SHAPES.length);\n  return SHAPES[randomIndex];\n};\n\nconst App = () => {\n  const [board, setBoard] = useState(Array.from({ length: ROWS }, () => Array(COLS).fill(EMPTY_CELL)));\n  const [currentShape, setCurrentShape] = useState(getRandomShape());\n  const [currentPosition, setCurrentPosition] = useState({ row: 0, col: Math.floor(COLS / 2) - 1 });\n\n  const requestRef = useRef();\n\n  const moveDown = () => {\n    setCurrentPosition((prev) => ({ ...prev, row: prev.row + 1 }));\n  };\n\n  const moveLeft = () => {\n    setCurrentPosition((prev) => ({ ...prev, col: prev.col - 1 }));\n  };\n\n  const moveRight = () => {\n    setCurrentPosition((prev) => ({ ...prev, col: prev.col + 1 }));\n  };\n\n  const rotate = () => {\n    setCurrentShape((prev) => {\n      const rotatedShape = prev[0].map((_, i) => prev.map((row) => row[i])).reverse();\n      return [rotatedShape];\n    });\n  };\n\n  const checkCollision = (shape, position) => {\n    for (let row = 0; row < shape.length; row++) {\n      for (let col = 0; col < shape[row].length; col++) {\n        if (\n          shape[row][col] &&\n          (board[position.row + row] && board[position.row + row][position.col + col]) !== EMPTY_CELL\n        ) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  const placeShapeOnBoard = () => {\n    setBoard((prevBoard) => {\n      const newBoard = prevBoard.map((row) => row.slice());\n      for (let row = 0; row < currentShape.length; row++) {\n        for (let col = 0; col < currentShape[row].length; col++) {\n          if (currentShape[row][col]) {\n            newBoard[currentPosition.row + row][currentPosition.col + col] = 1;\n          }\n        }\n      }\n      return newBoard;\n    });\n  };\n\n  const clearRows = () => {\n    setBoard((prevBoard) => {\n      const newBoard = prevBoard.filter((row) => !row.every((cell) => cell !== EMPTY_CELL));\n      while (newBoard.length < ROWS) {\n        newBoard.unshift(Array(COLS).fill(EMPTY_CELL));\n      }\n      return newBoard;\n    });\n  };\n\n  const handleKeyPress = (event) => {\n    switch (event.key) {\n      case 'ArrowUp':\n        rotate();\n        break;\n      case 'ArrowDown':\n        moveDown();\n        break;\n      case 'ArrowLeft':\n        moveLeft();\n        break;\n      case 'ArrowRight':\n        moveRight();\n        break;\n      default:\n        break;\n    }\n  };\n\n  const updateGame = () => {\n    moveDown();\n  };\n\n  const gameLoop = () => {\n    updateGame();\n    requestRef.current = requestAnimationFrame(gameLoop);\n  };\n\n  useEffect(() => {\n    if (checkCollision(currentShape, currentPosition)) {\n      placeShapeOnBoard();\n      clearRows();\n      setCurrentShape(getRandomShape());\n      setCurrentPosition({ row: 0, col: Math.floor(COLS / 2) - 1 });\n    }\n  }, [currentPosition, currentShape]);\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress);\n    requestRef.current = requestAnimationFrame(gameLoop);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      cancelAnimationFrame(requestRef.current);\n    };\n  }, [gameLoop]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"board\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={colIndex}\n                className={`cell ${cell !== EMPTY_CELL ? COLORS[cell - 1] : ''}`}\n              ></div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}